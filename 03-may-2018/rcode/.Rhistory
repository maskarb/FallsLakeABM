devtools::install("business-science/tibbletime")
devtools::install_github("business-science/tibbletime")
load("G:/My Drive/BerglundResearch/.RData")
install.packages('distr')
library(distr)
D <- DiscreteDistribution(supp=c(0,1,3,5,7), prob=c(0,0.25,0.25,0.25,0.25))
d(D)
d(D)(0:7)
install.packages('WaterML')
library(WaterML)
WaterMLVersion()
require(WaterML)
USGS <- "http://hydroportal.cuahsi.org/nwisdv/cuahsi_1_1.asmx?WSDL"
AirTemp <- GetValues(USGS,"NWISDV:01104480","NWISDV:00020DataType=MEAN",startDate = "2014-09-01", endDate="2014-09-30")
View(AirTemp)
plot(AirTemp$time,AirTemp$DataValue)
g <- ggplot(AirTemp, aes(x=AirTemp$time, y = AirTemp$DataValue)) + geom_point()
require(tidyverse)
g <- ggplot(AirTemp, aes(x=AirTemp$time, y = AirTemp$DataValue)) + geom_point() + geom_point(aes(color = AirTemp$DataValue))
g
# individual file import or something like that ---------------------------
shift <- 0.70
num <- 39
filename <- str.num("reservoir-timeSeries-%d.txt", num)
require(strucchange)
require(tidyverse)
rm(list=ls())
source('funcs.R')
source('G:/My Drive/BerglundResearch/model_data/rcode/funcs.R')
setwd(getwd())
getwd()
dirname(sys.frame(1)$ofile)
setwd("G:/My Drive/BerglundResearch/model_data/rcode")
source('funcs.R')
# individual file import or something like that ---------------------------
shift <- 0.70
num <- 39
filename <- str.num("reservoir-timeSeries-%d.txt", num)
folder <- str.num("%1.2f_runs", i)
file <- sprintf("G:/My Drive/BerglundResearch/model_data/%s/%s", folder, filename)
stress <- read_delim(file, ' ')
folder <- str.num("%1.2f_runs", shift)
file <- sprintf("G:/My Drive/BerglundResearch/model_data/%s/%s", folder, filename)
stress <- read_delim(file, ' ')
decomp.storage <- na.omit(decompose(ts(stress$storage, frequency = 12))$trend)
f <- decomp.storage ~ 1
h = 120
mf <- model.frame(f, data = data)
mf <- model.frame(f, data = decomp.storage)
formula <- f
y <- model.response(mf)
mf
y
data = decomp.storage
modelterms <- terms(formula, data = data)
modelterms
X <- model.matrix(modelterms, data = data)
X
nrow(X)
n = 588
k <- ncol(X)
k
rep(1L, n)
as.vector(X)
all.equal(as.vector(X), rep(1L, n))
isTRUE(all.equal(as.vector(X), rep(1L, n)))
isFALSE(all.equal(as.vector(X), rep(1L, n)))
isTRUE(FALSE)
intercept_only <- isTRUE(all.equal(as.vector(X), rep(1L, n)))
intercept_only
if(is.null(h)) h <- k + 1
h
if(h < 1) h <- floor(n*h)
h
breaks <- ceiling(n/h) - 2
breaks
hpc = c("none", "foreach")
hpc <- match.arg(hpc)
hpc <- "none"
RSSi <- function(i)
m
RSSi <- function(i)
{
ssr <- if(intercept_only) {
(y[i:n] - cumsum(y[i:n])/(1L:(n-i+1L)))[-1L] * sqrt(1L + 1L/(1L:(n-i)))
} else {
recresid(X[i:n,,drop = FALSE],y[i:n])
}
c(rep(NA, k), cumsum(ssr^2))
}
RSSi
1L
